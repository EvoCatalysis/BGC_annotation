import pyhmmer
import pickle
import os 
import hydra
from pathlib import Path
import pandas as pd

PROJECT_DIR = Path(__file__).resolve().parent.parent

# example
test_sequence=["MLTPYGPGGLLLVRDGDGRCVAVIDPATGRIVRAPGHSLSPAAAVPGARGARGTTDGLNQFSGVFPNQGSYAGGTLVTIIGTHFSHATAVYFGPRPAASFAVLDDRTIVAVTPSGSGSAPVTVTTPGGTARVGSFYYQYWPSLSGVIPAAGPVGGGNIVTLRGANLSTALLVHFGDAVAFPLVVSDAQLLVTAPPVTGPGSVPVYVAGIGGVSNRLLYTYAAAPSVTAVSPAAGPIAGGSTIVVTGTGLAGVTGVTIGGLPATSFRAYSDTLLVVVTPPGTPGPADITVTTPGGSVTVPAAFDYMAPSTTEVTSDPDPALVGQPVAFTATVAAVAPTTGTPTGTVTFDFGDGTAPVTAAVTDGTATVSHAYTAPSGTPYAVTAAYSGDLFFTSSSGADTQVVEASPTTTTLTSTPDPSQAGQPVAFVARVAPAPPGAGVPTGTVTFDFGDGTPPVTLPVSGGTASVTHAYATAAESPYPVSATYDGDDNFTPSTGTDSQTVQQAATATAVSVSPTSSVAGQPVTVTASVTSLPPGAGTPTGTVTFDFGDGTPPVTLPLTDGTADATHAFGAAGSPYTLTATYSGDDSFSASTGTGSQTVGQASSALAVSSTPDSSTVGQEVTFTATVTTLPPGGGTPTGTVTFDFGDGTPPVTLPLTDGTADATHAYTDAAATPYTVTVSYSGDADISAATSTALQTVGQASSATTVTSTPDPSTVGQQVTFTATVATLPPGSGTPTGTVTFDFGDGSPTTTALLSAGSTATTHAYTDAAGSPYTVTATYNGDANVTPSTGTDDQTVQTADTTLSLDSAPDPSTIGQSTTFVAKITPEAPAAGAPTGTVTFDFGDGSPPVTAPVEGGTATVTHTNSGVADSPYTVTATYSGDGNFNPSAGADTQVVTQAVSSTALSAGPSPSVTGQAVTFAAVVSAVPPAAGTPTGTVTFDFGDGTPPVTLPLTDGTADATHAYTDAAATPYTVTVSYSGDTNFLPSSGTDLHSVEPAPTLTTVTAAPDPSVTGEAVTVTVTPRAPGAGIPTGQAAFDFGDGSPVLTAQLENGTATVVHAYTSAAGSPYTITAHYSGDADFAPSDDTLSHTVAPAATTTVVTSSADPAAVGQSVTLIARVRPVPPGAGDPTGTVTFDFGDGTAPVTAPVSGGLATAVHAYAGTAGSPYTVTASYSGDPDFAASSGTAAQRVDSSVSTTATTVSSAPDPSTVGESVTFTAVVVAVPPASGTPTGTVTFDFGDGSAPVTAPLAGGTATAAHTYTAAAHPASVTAVYHGDTNFAGSAGLDTQTVSEAVSSTTLTSSPDPSVTGGPVTFTATVAAVDAGAGTPTGSVTLDFGDGSPTLRAPLTDGIATAVHAYTGTSGSPYAVTATYNGDAAFTGSTDTGTQTVNPATTATAVFSSPDPSTAGQPVTVTASLAAVSPGTGTPTGTVTFDFGDGTPPVTTPAVGGLATVTHAYTTTVNSPFTLTAAYSGDADFAASTGTTTQTVLQSAVTLAVSTGPNPTVAGEPVTLTATAAPVPPGAGVPTDTITVDFGDGTAPVTDSLAGGALHLTHTYASVAGSPYTITATYNGSDDFSSAVVTATETVLQDATTTTVAAAPIPSVVGQPVTFTASVKPVAGGGSPTGTVTLDFGDGTVPVAMPVVDGVATAQHAFTGTFGSPYAVTAAYSGDTDFTASGGGVTQTVGQAPSVTTVTASPDPSVTGQPVTVTATVAAAAPGAGSPTGTVTFDFGDGTATVTAPVAGGVATAAHTWTGTAGSPYTVTAAYSGDTDFSPATGTGTHTVAAAGTTTVVVSSPDPSVSGQVVTVMAGVAANTPGDGVPTGTVTFDFGDGSPAVTASLTGGTASTTHAWPGTSGSPYTVTATYSGDGDFAPSTGSGSQSVTPATTALTVSGLPEPSVTGQPVTFFARVAPDGGGDGTPTGTVTYDFGDGTTPVVAPVTDGMATAVHAYPSAAGSPFTVTATYSGDADFLASVAAEIHTVLPAVSTTVVSSSPDPSVSGQPVTVTAAVTAEAPGAGTPTGTVTFDFGDGTTPVTAPVTDGTATATHVWSSTSGSPYTLTATYSGDAGFTPSKATGTKTVTAAATTTAVTSSPDPSVPGQSVTLTATVAALAPGAGSPTGTVTFTFGDGTPAVSATVLAGSATVTHAWAGTAGSPYPITADYSGDPDFNPSSGSDTQTVGQGATGLSLVSSPDPSVAGQEVTFTARVTAVPPGAGTPTGTVTFDFGDGTAPVTAPVSAGVATIAHTYATASATPYAVTATYSGDPDFAPATVTAPHTVAAGAATTSTTVVSSPDPTVTGQPVTFTATVTPTPPGAGVPTGTVAFDFGDGTATITAPVSGGVATVTHTYVSAAGSPYAVSARYSGDSNFSSSSGTDLHTVAPASTLTTLTSAPDPSVTGQPVTLTATVAALAPGAGVPTGTVTFDFGDGTPTTSAPVSGGVARVTHTYTSASGPLTVTALYDGDVSFLSSSGTDTQTVNKAATTTAVVSSPDPTVVGQAMTITASVASAAPGSGTPTGTVTFDFGDGTAPVTAPVAGGLATVAHTYTATAGSPYPLTATYNGDANYTPSSGTDTQTVNKAATTTAVVSSPDPTVVGQTTTITATVVSVAPGTGTPTGTVTFSFGDGSPSVTAPVVGGQATVTRASTSSGPVTLTATYNGDANYTPSNGSNTQTVNKAATTTALASAPDPTVAGQSVTLTATVAPVAPGAGTPTGTVTFSFGDGTGSTTATLSGGTATVTHTYTATSATPYPLAATYNGDANYTSSSGSDTQTVNKAATTTALVSSPDPSVAGQPVTLTATVAPVAPWSRHPHRHRHLLLRRRHRLHHRHPLRRHRHRHPHLHRHVRHPVPPRRHLQRGRQLHLVQRLGHPDRQQGGHHDGAGLLARSQRRRPAGHPHRDRGPRRPLEQAPPPAPSPSPSATAPAPPPPPSPAAPPPSPTPTPPRPPPRTPSPPPTTGTPTTPRPAARTPRPSTRRPPRRRWSPRPIPASPASRSPSPRPWPPSPPGAGTPTGTVTFSFGDGTGSTTATLSGGTATVTHTYTAASTTASPLTATYNGGTNFTTSSGSDTQTVNKAATATAVSSTPDPSAAGQAVTVTAAVSALAPGAGTPTGTVTFTFGDGTSSSTVPLSGGIATVSHTYTTKTGSPFPLTAKYNGDTSFTTSSGAATHTVNQNLTTTTVTTSPDPSVVGQSVTLRATVSSAGGIPTGKVTFSFGDGTSSVAATLAGGVATVTHTYTTTTGSPFTVTATYGGEVSFTASSGTDTQTVNKAATLTSVVSTPNPASTGDRVTVTATVVPVAPGAGTPSGTVTLAIPGRTPQTVALVNGSASATFSPLPRGIYTVTGNYNGDVSFAGSTGLTLQTVV",
"VVIVGMSCRFPGGVGSPEDLWGLLVGGGDGVVPFPVERGWDVEGLFDPEPGVPGKVSTREGGFLPGVDEFDPGFFGISPREAVAMDPQQRLLLEASWEAFERAGIVPGVLRGSRTGVFAGTNGQDYTGLLVASGEEDLGGYIGTGNAASVVSGRLSYTFGLEGPAVTVDTACSASLVALHLAVQSLRAGECDLALAGGVTVMSTPGLFVDFSRQRGLAADGRCKAFSDAADGAGFSEGVGVLVVERLSDARRHGHRVLAVVAGSAVNQDGASNGLTAPNGPSQQRVIRQALAGAGLSPSDVDVVEAHGTGTSLGDPIEAQALLATYGQGRDADRPLWLGSVKSNIGHTQAAAGVAGVIKMVLALQHGVLPQTLHVDEPSSHVDWSAGEVRLLTESVQWPEGERPRRAGVSSFGISGTNAHTIIEEAP"]
def pfam_indentify(hmm_file, 
                   protein_sequence:list, 
                   BGC_number:str): 
    alphabet = pyhmmer.easel.Alphabet.amino()
    result=[]
    seq_object=[]
    for sequence in protein_sequence:
        text_seq=pyhmmer.easel.TextSequence(sequence=sequence)
        digital_seq=text_seq.digitize(alphabet)
        seq_object.append(digital_seq)
    with pyhmmer.plan7.HMMFile(hmm_file) as hmms:
        print(f"Scanning BGC:{BGC_number}")
        hits = pyhmmer.hmmscan(seq_object,hmms,cpus=40,E=1e-10) #generator
        for hit in hits: #hit:an enzyme in a BGC
            if len(hit)==0:
                result.append(("error","error",0))
            else:
                domains=[]
                for domain in hit:
                    domains.append((domain.accession.decode(),domain.name.decode(),domain.evalue))
                result.append(domains)
    return result

def pfam_try(hmm_file,protein_sequence):
    alphabet = pyhmmer.easel.Alphabet.amino()
    seq_object=[]
    for sequence in protein_sequence:
        text_seq=pyhmmer.easel.TextSequence(sequence=sequence)
        digital_seq=text_seq.digitize(alphabet)
        seq_object.append(digital_seq)
    with pyhmmer.plan7.HMMFile(hmm_file) as hmms:
        hits = pyhmmer.hmmscan(seq_object,hmms,cpus=4,E=1e-10) #generator
        return hits

if  __name__ == "__main__":
    with hydra.initialize(config_path=os.path.join("..", "configs"),
                          version_base="1.2"):
        cfg = hydra.compose(config_name="dataset")

    hmm_file = os.path.join(PROJECT_DIR, cfg.pfam_file)
    result={}
    BGC_data=pd.read_pickle(os.path.join(PROJECT_DIR, cfg.MAC_metadata))
    BGC_enzyme = BGC_data.set_index('BGC_number')['enzyme_list'].to_dict()
    print("BGC data loaded,","length:",len(BGC_enzyme))
    for BGC_number, enzyme_list in BGC_enzyme.items():
        result[BGC_number] = pfam_indentify(hmm_file, enzyme_list, BGC_number)
    with open(os.path.join(PROJECT_DIR, cfg.pfam_file), 'wb') as f:
        pickle.dump(result, f)